#!/usr/bin/ruby

# Dropzone Destination Info
# Name: Unpack to Directory
# Description: This will unpack the zip files to a given directory. Waiting for destination name to make more general to reuse this script for multiple directory drops.
# Handles: NSFilenamesPboardType
# Events: Clicked, Dragged
# Creator: Richard Guay <raguay@customct.com>
# URL: http://customct.com
# IconURL: http://www.customct.com/images/CompressFile.png

def dragged
	#
	# Turn on determinate mode.
	#
	$dz.determinate(true)

	#
	# Set the default return string to an error.
	#
	result = "You have to set the defaults first!"

	#
	# Get the data values.
	#
	dataDir = File.expand_path("~/Library/Application Support/Dropzone/Destination Data/")
	if File.directory?(dataDir)
		#
		# get the defaults.
		#
		$defaults = IO.readlines("#{dataDir}/UnpacktoDir.txt")
		$dir = $defaults[0].split(":")[1].strip
	
		#
		# Process each image file.
		#
		total = $items.count

		#
		# Tell dropzone we are starting...
		#
		$dz.begin("Unpacking #{total} files...")

		#
		# Index over all of the given images.
		#
		for index in 0 ... total
			#
			# Convert the image file.
			#
			output = `/usr/bin/unzip  -n "#{$items[index]}" -d "#{$dir}" `

			#
			# Delete the original file.
			#
			File.delete($items[index])

			#
			# Tell Dropzone what percentage is done.
			#
			$dz.percent((((index + 1)*100)/total).to_i)
		end

		#
		# Set the results string to finished.
		#
		result = "Finished Unpacking books."
	end 

	#
	# Tell the user that it is done.
	#
	$dz.finish(result)

	#
	# Finish out the dropzone protocal. If you want a url in the clipboard, pass it
	# here. If you just want to copy text to the clipboard, use $dz.text() instead.
	# Either $dz.url() or $dz.text() has to be the last thing in the dragged method.
	#
	$dz.url(false) 
end

def clicked
	#
	# The clicked handler should get the size and extension to use and
	# save it in the configuration file. We will save data in the 
	# ~/Library/Application Support/Dropzone/Destination Data/UnpacktoDir.txt
	#

	#
	# Set the default return string to the error condition.
	#
	result = "Sorry, you canceled out."

	#
	# Request the width of the graphic.
	#
	button1, dir =`./CocoaDialog standard-inputbox --title "Unpack to Directory" --e --informative-text "Which directory? "`.split("\n")

	#
	# See if the user canceled out. Do not continue if they cancel.
	#
	if button1 != "2"
		#
		# Okay, save the directory.
		#
		#
		# Make sure the data directory exists.
		#
		dataDir = File.expand_path("~/Library/Application Support/Dropzone/Destination Data/"	)
		if ! File.directory?(dataDir)
			#
			# Directory does not exist! Create it!
			#
			FileUtils.mkdir_p(dataDir)
		end	

		#
		# Write the data file. Do not append, but delete and write fresh!
		#
		File.open("#{dataDir}/UnpacktoDir.txt", 'w') { |file| file.write("dir:#{dir}") }		
		#
		# Tell the user by setting the return string to what the user gave. 
		#
		result = "Unpack Directory: #{dir}"
	end

	#
	# Tell the user that it is done.
	#
	$dz.finish(result)

	#
	# Finish out the dropzone protocal. If you want a url in the clipboard, pass it
	# here. If you just want to copy text to the clipboard, use $dz.text() instead.
	# Either $dz.url() or $dz.text() has to be the last thing in the clicked method.
	#
	$dz.url(false)
end